import asyncpg
import os
from typing import Optional
from loger.logger import logger


class Database:
    def __init__(self):
        self.pool = None  # –ü–æ–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –ø–æ–∑–∂–µ –≤ –º–µ—Ç–æ–¥–µ connect()

    async def is_connected(self):
        return self.pool is not None and not self.pool._closed

    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —Å –∞–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–µ–º –ë–î –∏ —Ç–∞–±–ª–∏—Ü"""
        try:
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            sys_pool = await asyncpg.create_pool(
                user=os.getenv("POSTGRES_USER"),
                password=os.getenv("POSTGRES_PASSWORD"),
                host=os.getenv("POSTGRES_HOST"),
                port=os.getenv("POSTGRES_PORT"),
                database=os.getenv("POSTGRES_DB"),
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            async with sys_pool.acquire() as conn:
                exists = await conn.fetchval(
                    "SELECT 1 FROM pg_database WHERE datname = $1",
                    os.getenv("POSTGRES_DB"),
                )
                if not exists:
                    await conn.execute(f"CREATE DATABASE {os.getenv('POSTGRES_DB')}")
                    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞")

            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—É–ª
            await sys_pool.close()

            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω–µ—á–Ω—ã–π –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å —Ä–µ–∞–ª—å–Ω–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            self.pool = await asyncpg.create_pool(
                user=os.getenv("POSTGRES_USER"),
                password=os.getenv("POSTGRES_PASSWORD"),
                host=os.getenv("POSTGRES_HOST"),
                port=os.getenv("POSTGRES_PORT"),
                database=os.getenv("POSTGRES_DB"),
            )

            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–∞–±–ª–∏—Ü
            await self._create_tables()

        except Exception as e:
            logger.critical(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            raise

    async def _create_tables(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –Ω—É–∂–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü"""
        async with self.pool.acquire() as conn:
            # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await conn.execute(
                """
                CREATE TABLE IF NOT EXISTS users (
                    user_id BIGINT PRIMARY KEY,
                    username TEXT,
                    thread_id INT UNIQUE,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                );
                """
            )

            # –¢–∞–±–ª–∏—Ü–∞ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            await conn.execute(
                """
                CREATE TABLE IF NOT EXISTS message_map (
                    group_message_id INT,
                    user_message_id INT,
                    user_id BIGINT REFERENCES users(user_id),
                    PRIMARY KEY (group_message_id, user_id)
                );
                """
            )

            # –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞
            await conn.execute(
                """
                CREATE TABLE IF NOT EXISTS bot_messages (
                    message_id INT PRIMARY KEY,
                    user_id BIGINT REFERENCES users(user_id),
                    thread_id INT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                );
                """
            )

            # –¢–∞–±–ª–∏—Ü–∞ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø
            await conn.execute(
                """
                CREATE TABLE IF NOT EXISTS media_groups (
                    media_group_id TEXT PRIMARY KEY,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                );
                """
            )

    async def save_bot_message(self, message_id: int, user_id: int, thread_id: int):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
        async with self.pool.acquire() as conn:
            await conn.execute(
                """
                INSERT INTO bot_messages (message_id, user_id, thread_id)
                VALUES ($1, $2, $3)
                ON CONFLICT (message_id) DO NOTHING
                """,
                message_id,
                user_id,
                thread_id,
            )

    async def get_user_by_bot_message(self, message_id: int) -> Optional[dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞."""
        async with self.pool.acquire() as conn:
            return await conn.fetchrow(
                """
                SELECT u.* FROM users u
                JOIN bot_messages bm ON u.user_id = bm.user_id
                WHERE bm.message_id = $1
                """,
                message_id,
            )

    async def get_user(self, user_id: int) -> Optional[dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É."""
        async with self.pool.acquire() as conn:
            return await conn.fetchrow(
                "SELECT * FROM users WHERE user_id = $1", user_id
            )

    async def get_user_by_thread(self, thread_id: int) -> Optional[dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É –ø–æ—Ç–æ–∫–∞."""
        async with self.pool.acquire() as conn:
            return await conn.fetchrow(
                "SELECT * FROM users WHERE thread_id = $1", thread_id
            )

    async def create_user(self, user_id: int, username: str, thread_id: int) -> None:
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."""
        async with self.pool.acquire() as conn:
            await conn.execute(
                """
                INSERT INTO users (user_id, username, thread_id)
                VALUES ($1, $2, $3)
                ON CONFLICT (user_id) DO NOTHING
                """,
                user_id,
                username,
                thread_id,
            )

    async def add_message_mapping(
        self, group_message_id: int, user_message_id: int, user_id: int
    ) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–≤—è–∑—å –º–µ–∂–¥—É –≥—Ä—É–ø–ø–æ–≤—ã–º –∏ –ª–∏—á–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º."""
        async with self.pool.acquire() as conn:
            await conn.execute(
                """
                INSERT INTO message_map 
                (group_message_id, user_message_id, user_id)
                VALUES ($1, $2, $3)
                ON CONFLICT DO NOTHING
                """,
                group_message_id,
                user_message_id,
                user_id,
            )

    async def check_media_group(self, media_group_id: str) -> Optional[int]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã."""
        async with self.pool.acquire() as conn:
            return await conn.fetchval(
                "SELECT 1 FROM media_groups WHERE media_group_id = $1", media_group_id
            )

    async def close(self) -> None:
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."""
        if self.pool:
            await self.pool.close()
            logger.info("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")

    async def get_message_mapping(
        self, group_message_id: int, user_id: int
    ) -> Optional[int]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–≤—è–∑–∞–Ω–Ω–æ–µ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É –≥—Ä—É–ø–ø—ã –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        async with self.pool.acquire() as conn:
            return await conn.fetchval(
                "SELECT user_message_id FROM message_map "
                "WHERE group_message_id = $1 AND user_id = $2",
                group_message_id,
                user_id,
            )

    async def execute(self, query: str, *args):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç SQL-–∑–∞–ø—Ä–æ—Å."""
        async with self.pool.acquire() as conn:
            return await conn.execute(query, *args)

    async def create_tables(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–∞–±–ª–∏—Ü"""
        async with self.pool.acquire() as conn:
            await conn.execute(
                """
                CREATE TABLE IF NOT EXISTS messages (
                    id SERIAL PRIMARY KEY,
                    user_id BIGINT NOT NULL,
                    message_type VARCHAR(50) NOT NULL,
                    content TEXT,
                    file_id VARCHAR(255),
                    created_at TIMESTAMP DEFAULT NOW()
                )
            """
            )


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∏–Ω—Å—Ç–∞–Ω—Å–∞—Ü–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()
