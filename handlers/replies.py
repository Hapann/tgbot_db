from telegram import Update, ReactionTypeEmoji
from telegram.ext import MessageHandler, filters, CallbackContext
from database import db
from loger.logger import logger
from globals.config import GROUP_CHAT_ID


async def handle_group_reply(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–≤—è–∑–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        if not (update.message and update.message.reply_to_message):
            logger.debug("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–æ–º")
            return

        if update.message.chat_id != GROUP_CHAT_ID:
            return

        original_message = update.message.reply_to_message
        thread_id = original_message.message_thread_id

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
        if (
            not original_message.from_user
            or original_message.from_user.id != context.bot.id
        ):
            logger.debug("–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞")
            return

        # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–ø–∏–∫–∞
        if getattr(original_message, "forum_topic_created", None):
            logger.debug("–û—Ç–≤–µ—Ç –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–ø–∏–∫–µ")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_data = await db.get_user_by_bot_message(original_message.message_id)
        if not user_data:
            await update.message.reply_text("‚ùå –î–∏–∞–ª–æ–≥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            logger.error("–¢–æ–ø–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        user_id = user_data["user_id"]
        message_map = context.bot_data.setdefault("message_map", {})
        sent = False
        sent_types = []

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
        if update.message.text and not sent:
            try:
                sent_message = await context.bot.send_message(
                    chat_id=user_id,
                    text=update.message.text,
                    reply_to_message_id=message_map.get(original_message.message_id),
                )
                sent = True
                sent_types.append("—Ç–µ–∫—Å—Ç")
                logger.info("–¢–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏")
                return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞–∫–æ–Ω—Ç–µ–Ω—Ç–∞
        media_handlers = [
            ("animation", "send_animation", update.message.animation),
            (
                "photo",
                "send_photo",
                update.message.photo[-1] if update.message.photo else None,
            ),
            ("video", "send_video", update.message.video),
            ("audio", "send_audio", update.message.audio),
            ("voice", "send_voice", update.message.voice),
            ("document", "send_document", update.message.document),
            ("sticker", "send_sticker", update.message.sticker),
            ("video_note", "send_video_note", update.message.video_note),
            ("location", "send_location", update.message.location),
        ]

        for media_type, method_name, media_obj in media_handlers:
            if media_obj and not sent:
                try:
                    method = getattr(context.bot, method_name)
                    kwargs = {
                        "chat_id": user_id,
                        media_type: media_obj.file_id,
                        "reply_to_message_id": message_map.get(
                            original_message.message_id
                        ),
                    }

                    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏
                    if media_type == "location":
                        kwargs["latitude"] = media_obj.latitude
                        kwargs["longitude"] = media_obj.longitude
                        del kwargs["location"]

                    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–∏–ø–æ–≤
                    if media_type not in {"sticker", "voice", "video_note", "location"}:
                        kwargs["caption"] = update.message.caption

                    sent_message = await method(**kwargs)
                    sent = True
                    sent_types.append(media_type)
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω {media_type}")
                    break
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {media_type}: {e}")

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–≤—è–∑–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π
        if sent:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å –º–µ–∂–¥—É –≥—Ä—É–ø–ø–æ–≤—ã–º –∏ –ª–∏—á–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            await db.add_message_mapping(
                group_message_id=update.message.message_id,
                user_message_id=sent_message.message_id,
                user_id=user_id,
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ –¥–ª—è –±—É–¥—É—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
            await db.save_bot_message(
                message_id=sent_message.message_id, user_id=user_id, thread_id=thread_id
            )

            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∞–∫—Ü–∏–∏ –∏ –º–µ—Ç—Ä–∏–∫
            # try:
            #    await update.message.set_reaction([ReactionTypeEmoji("‚úÖ")])
            #    await db.execute(
            #        "INSERT INTO metrics (name, value) VALUES ($1, 1) "
            #        "ON CONFLICT (name) DO UPDATE SET value = metrics.value + 1",
            #        "messages_sent"
            #    )
            # except Exception as e:
            #    logger.warning(f"–û—à–∏–±–∫–∞ —Ä–µ–∞–∫—Ü–∏–∏: {e}")

            logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {', '.join(sent_types)}")

        elif not sent:
            await update.message.reply_text("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è")
            logger.warning("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞")

    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", exc_info=True)
        await update.message.reply_text("üí• –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞")


def register_replies_handler(application):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤"""
    application.add_handler(
        MessageHandler(filters.ChatType.GROUPS & filters.REPLY, handle_group_reply)
    )
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
